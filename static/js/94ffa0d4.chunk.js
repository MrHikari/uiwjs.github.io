(window.webpackJsonp=window.webpackJsonp||[]).push([[340],{589:function(n,t){n.exports='Popover 气泡卡片\n===\n\n点击/鼠标移入元素，弹出气泡式的卡片浮层。\n\n```jsx\nimport { Popover } from \'uiw\';\n```\n\n### 基础用法\n\n最简单的用法。\n\n\x3c!--DemoStart--\x3e \n```js\nclass Demo extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      isVisbale: false,\n    }\n  }\n  onClick() {\n    this.setState({ isVisbale: false });\n  }\n  handleVisibleChange(isVisbale) {\n    this.setState({ isVisbale });\n  }\n  render() {\n    return (\n      <div style={{ backgroundColor: \'#fff\', margin: -15, padding: 15, borderRadius: \'5px 5px 0 0\' }}>\n        <Popover\n          trigger="click"\n          placement="top"\n          visible={this.state.isVisbale}\n          onVisibleChange={this.handleVisibleChange.bind(this)}\n          content={\n            <Card bordered={false} title="Card标题" extra={<a href="#">更多</a>} style={{ width: 200 }}>\n              <div>Are you sure you want to delete these items? You won\'t be able to recover them.</div>\n              <div style={{ display: "flex", justifyContent: "flex-end", marginTop: 15 }}>\n                <Button size="small" onClick={this.onClick.bind(this)}>\n                  Cancel\n                </Button>\n                <Button type="danger" size="small" onClick={this.onClick.bind(this)}>\n                  Delete\n                </Button>\n              </div>\n            </Card>\n          }\n        >\n          <Button active={this.state.isVisbale}>弹出目标</Button>\n        </Popover>\n      </div>\n    )\n  }\n}\n```\n\x3c!--End--\x3e\n\n### 位置\n\n位置有 `12` 个方向，根据 `placement` 参数来设置。\n\n\x3c!--DemoStart--\x3e\n```js\nconst btnStl = {position: \'relative\', width: 70 }\nconst content = (\n  <Card bordered={false} style={{ width: 120 }}>\n    <div>Are you sure you want to delete these items? You won\'t be able to recover them.</div>\n  </Card>\n)\nconst Demo = () => (\n  <div style={{ backgroundColor: \'#fff\', margin: -15, padding: 15, borderRadius: \'5px 5px 0 0\' }}>\n    <div style={{ position: \'relative\' }}>\n\n      <Popover trigger="click" placement="topLeft" content={content}>\n        <Button style={{ ...btnStl, left: 70 }}>TL</Button>\n      </Popover>\n      <Popover trigger="click" placement="top" content={content}>\n        <Button style={{ ...btnStl, left: 70}}>Top</Button>\n      </Popover>\n      <Popover trigger="click" placement="topRight" content={content}>\n        <Button style={{ ...btnStl, left: 70 }}>TR</Button>\n      </Popover>\n\n    </div>\n    <div style={{ position: \'relative\', paddingTop: 10 }}>\n\n      <Popover trigger="click" placement="leftTop" content={content}>\n        <Button style={{ ...btnStl }}>LT</Button>\n      </Popover>\n      <Popover trigger="click" placement="rightTop" content={content}>\n        <Button style={{ ...btnStl, left: 216 }}>RT</Button>\n      </Popover>\n\n    </div>\n    <div style={{ position: \'relative\', paddingTop: 10 }}>\n\n      <Popover trigger="click" placement="left" content={content}>\n        <Button style={{ ...btnStl }}>Left</Button>\n      </Popover>\n      <Popover trigger="click" placement="right" content={content}>\n        <Button style={{ ...btnStl, left: 216 }}>Right</Button>\n      </Popover>\n\n    </div>\n    <div style={{ position: \'relative\', paddingTop: 10 }}>\n\n      <Popover trigger="click" placement="leftBottom" content={content}>\n        <Button style={{ ...btnStl }}>LB</Button>\n      </Popover>\n      <Popover trigger="click" placement="rightBottom" content={content}>\n        <Button style={{ ...btnStl, left: 216 }}>RB</Button>\n      </Popover>\n\n    </div>\n    <div style={{ position: \'relative\', paddingTop: 10 }}>\n\n      <Popover trigger="click" placement="bottomLeft" content={content}>\n        <Button style={{ ...btnStl, left: 70 }}>BL</Button>\n      </Popover>\n      <Popover trigger="click" placement="bottom" content={content}>\n        <Button style={{ ...btnStl, left: 70 }}>Bottom</Button>\n      </Popover>\n      <Popover trigger="click" placement="bottomRight" content={content}>\n        <Button style={{ ...btnStl, left: 70 }}>BR</Button>\n      </Popover>\n\n    </div>\n  </div>\n)\n```\n\x3c!--End--\x3e\n\n### 鼠标经过弹出目标\n\n\x3c!--DemoStart--\x3e\n```js\nconst btnStl = {position: \'relative\', width: 70 }\nconst content = (\n  <Card\n    style={{ width: 220 }}\n    bordered={false}\n    title="Card标题"\n    footer={\n      <span>这里是页脚</span>\n    }\n  >\n    <div>这是你鼠标经过弹出的目标。</div>\n  </Card>\n)\nconst Demo = () => (\n  <div style={{ backgroundColor: \'#fff\', margin: -15, padding: 15, borderRadius: \'5px 5px 0 0\' }}>\n    <Popover trigger="hover" placement="top" content={content}>\n      <Button>鼠标经过弹出目标</Button>\n    </Popover>\n  </div>\n)\n```\n\x3c!--End--\x3e\n\n### usePortal\n\n设置 `usePortal={false}` 将模态对话框生成到根节点的里面，这样为了计算位置准确，你需要将父层样式设为 `position: relative;` 。\n\n\x3c!--DemoStart--\x3e \n```js\nclass Demo extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      isVisbale: false,\n    }\n  }\n  onClick() {\n    this.setState({ isVisbale: false });\n  }\n  handleVisibleChange(isVisbale) {\n    this.setState({ isVisbale });\n  }\n  render() {\n    return (\n      <div style={{ backgroundColor: \'#fff\', margin: -15, padding: 15, borderRadius: \'5px 5px 0 0\' }}>\n        <div style={{ position: \'relative\' }}>\n          <Popover\n            trigger="click"\n            placement="top"\n            usePortal={false}\n            visible={this.state.isVisbale}\n            onVisibleChange={this.handleVisibleChange.bind(this)}\n            content={\n              <Card bordered={false} title="Card标题" extra={<a href="#">更多</a>} style={{ width: 200 }}>\n                <div>Are you sure you want to delete these items? You won\'t be able to recover them.</div>\n                <div style={{ display: "flex", justifyContent: "flex-end", marginTop: 15 }}>\n                  <Button size="small" onClick={this.onClick.bind(this)}>\n                    Cancel\n                  </Button>\n                  <Button type="danger" size="small" onClick={this.onClick.bind(this)}>\n                    Delete\n                  </Button>\n                </div>\n              </Card>\n            }\n          >\n            <Button>弹出目标</Button>\n          </Popover>\n        </div>\n      </div>\n    )\n  }\n}\n```\n\x3c!--End--\x3e\n\n## Props\n\n| 参数 | 说明 | 类型 | 默认值 |\n|--------- |-------- |--------- |-------- |\n| content | 显示的内容 | String,React.ReactNode | - |\n| placement | 气泡框位置，可现实箭头在不通的方位 | Enum{`top`, `topLeft`, `topRight`,<br /> `left`, `leftTop`, `leftBottom`,<br /> `right`, `rightTop`, `rightBottom`,<br /> `bottom`, `bottomLeft`, `bottomRight`} | `top` |\n| visibleArrow | 是否显示 Tooltip 箭头 | Boolean | `true` |\n| delay | 延迟进入和消失，`{ show: 2000, hide: 4000 }` 或者直接设置 `2000`，只对 `trigger=hover` 有效，继承 `<OverlayTrigger />` 组件属性 | Object/Number | - |\n| trigger | 悬停/点击弹出窗口，继承 `<OverlayTrigger />` 组件属性 | Enum{`hover`, `click`} | `hover` |\n| disabled | 是否禁用弹出目标 | Boolean | `false` |\n| visible | 默认是否显示弹窗，继承 `<OverlayTrigger />` 组件属性 | Boolean | `false` |\n| onVisibleChange | 显示隐藏的回调，继承 `<OverlayTrigger />` 组件属性 | Function(isVisible:bool) | - |\n\n更多属性请参考 [OverlayTrigger](/components/overlay-trigger)。'}}]);